# This workflow will create a release and build multiple versions of the webrtc library.
name: test_build_linux

on:
  workflow_dispatch:
    branches: [main]
    inputs:
      fail_fast:
        description: "Should stop the workflow as soon as one configuration fails"
        required: false
        type: boolean
        default: true

jobs:
  build-linux:
    strategy:
      fail-fast: ${{ github.event.inputs.fail_fast != 'false'}}
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04, ubuntu-22.04]
        architecture: [arm64, amd64]
        build-type: [Release, Debug]

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Generate Version Output
        id: generate_version_output
        run: echo "::set-output name=version::$(cat VERSION)"
        shell: bash

      - name: Print Version Information
        run: echo "Version ${{ steps.generate_version_output.outputs.version }}"
        shell: bash

      - name: Generate Release File Name
        id: generate_release_file_name
        run: |
          echo "::set-output name=release_file_name::webrtc-native-build-${{ matrix.os }}-\
          ${{ matrix.architecture }}-\
          ${{ matrix.build-type }}-\
          ${{ steps.generate_version_output.outputs.version }}"

      - name: Print Release File Name
        run: echo "Release File Name ${{ steps.generate_release_file_name.outputs.release_file_name }}"
        shell: bash

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build cmake build-essential libssl-dev libboost-all-dev
          sudo apt-get install libglib2.0-dev libgtk-3-dev libpulse-dev libasound2-dev

      - name: Install cross compilation dependencies
        run: |
          sudo apt-get install g++-aarch64-linux-gnu gcc-aarch64-linux-gnu
          sudo apt-get install gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf
        if: matrix.architecture == 'arm64' && matrix.os != 'ubuntu-18.04'

      - name: Install cross compilation dependencies (Ubuntu 18.04)
        run: |
          sudo apt-get install g++-8-aarch64-linux-gnu gcc-8-aarch64-linux-gnu
          sudo apt-get install gcc-8-arm-linux-gnueabihf g++-8-arm-linux-gnueabihf
        if: matrix.architecture == 'arm64' && matrix.os == 'ubuntu-18.04'

      - name: Use gcc-8 and g++-8 on ubuntu-18.04
        run: |
          sudo apt-get install gcc-8 g++-8
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 100
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-8 100
          sudo update-alternatives --set gcc /usr/bin/gcc-8
          sudo update-alternatives --set g++ /usr/bin/g++-8
        if: matrix.os == 'ubuntu-18.04' && matrix.architecture != 'arm64'

      - name: Use gcc-8 and g++-8 cross-compilers on ubuntu-18.04
        run: |
          sudo update-alternatives --install /usr/bin/aarch64-linux-gnu-gcc aarch64-linux-gnu-gcc /usr/bin/aarch64-linux-gnu-gcc-8 100
          sudo update-alternatives --install /usr/bin/aarch64-linux-gnu-g++ aarch64-linux-gnu-g++ /usr/bin/aarch64-linux-gnu-g++-8 100
          sudo update-alternatives --set aarch64-linux-gnu-gcc /usr/bin/aarch64-linux-gnu-gcc-8
          sudo update-alternatives --set aarch64-linux-gnu-g++ /usr/bin/aarch64-linux-gnu-g++-8
          sudo update-alternatives --install /usr/bin/arm-linux-gnueabihf-gcc arm-linux-gnueabihf-gcc /usr/bin/arm-linux-gnueabihf-gcc-8 100
          sudo update-alternatives --install /usr/bin/arm-linux-gnueabihf-g++ arm-linux-gnueabihf-g++ /usr/bin/arm-linux-gnueabihf-g++-8 100
          sudo update-alternatives --set arm-linux-gnueabihf-gcc /usr/bin/arm-linux-gnueabihf-gcc-8
          sudo update-alternatives --set arm-linux-gnueabihf-g++ /usr/bin/arm-linux-gnueabihf-g++-8
        if: matrix.os == 'ubuntu-18.04' && matrix.architecture == 'arm64'

      - name: Create build directory
        working-directory: .
        run: |
          mkdir build

      - name: Run CMake and build webrtc-native-build
        working-directory: build
        run: |
          cmake ../ -DCMAKE_BUILD_TYPE=${{ matrix.build-type}} -DCMAKE_BUILD_ARCHITECTURE=${{ matrix.architecture }}
          make -j2
          make install
